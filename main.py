# Generate a specified number of random password of specified length, then give the option to generate the same again, or stop.
# Check if they can answer with numbers or written out.
# symbols: !"#$%&'()*+,-./:;<=>?@[\]^_`{|}~, A-Z, a-z, 0-9

import random
from text2int import text2int
import sys


# specify how many passwords are to be generated.
# copied a module to convert text to integers
# couldn't print the error message generated by text2int, so I had to create my own.
# used global variables so there can be multiple types of entry (numbers or text)
def getHowMany():
    global howMany
    howMany = (input("How many passwords do you want to generate?\n:"))
    if howMany.isdigit():
        howMany = int(howMany)
    else:
        try:
            howMany = text2int(howMany)
        except Exception:
            print("%s is an invalid entry. Try again." %howMany)
            getHowMany()


# Specify how long the passwords should be. Ditto error message situation. 
def getDigits():
    global digits
    digits = (input("How long should the passwords be?\n:"))
    if digits.isdigit():
        digits = int(digits)
    else:
        try:
            digits = text2int(digits)
        except Exception:
            print("%s is an invalid entry. Try again." %digits)
            getDigits()


# Generate a random string character.
def generateRandomChar ():
    return chr(random.randint(33, 126))


# Generate a password of specified length.
def generatePassword(digits):
    digitCount = digits
    password = ''

    for i in range(digitCount):
        password = password + generateRandomChar()
    
    return password


# Create a list of a specified number of password options.
def collectPasswords(digits, howMany):
    i = howMany
    passwordList = []
    while i > 0:
        passwordList.append(generatePassword(digits))
        i -= 1

    # print list of passwords, each on a new line, without creating a string of all passwords using join.
    print(*passwordList, sep = "\n")


#check back if user wants to generate more passwords.
#if they keep answering wrong, get increasingly frustrated.
def goAgain(answer):
    invalidAnswers = 0
    while answer != "Y":
        if answer == "N":
            return False
        else:
            if invalidAnswers == 5:
                answer = input("Make sure that's a capital Y or N...: ")
            if invalidAnswers == 7:
                answer = input("Dude, seriously, capital Y or captial N. Not that hard. go: ")
            if invalidAnswers == 11:
                sys.exit("You know what? Forget it. You're hopeless or a dick.")
                
            answer = input("What was that? type Y or N: ")
            invalidAnswers += 1

    return True 


# collect the initial values
def getValues():
    getHowMany()
    getDigits()






def theMainFunction(digits, howMany):
    # if printing the items of the list directly with collect passwords
    collectPasswords(digits, howMany)
    again = input("Generate %d more passwords? (Y/N): " %howMany)
    
    if goAgain(again): theMainFunction(digits, howMany)




# collect values for digits and howMany on first run
getValues()
theMainFunction(digits, howMany)